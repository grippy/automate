# This file is how we test configuration parsing.
# This is currently the only reference file
# around Automate.yaml configuration options.

# A workspace is a collection of members
# which point to a directory where an Automate.yaml
# file lives.
workspace:
  name: my-workspace
  members: [./*]

# ------

# A package definition example.
package:
  name: my-package
  description: |
    A fixture example used for testing purposes only.
  version: "0.0.0"
  # Deno permissions requirements for running the package.
  permissions:
    - allow-all

# A package defines dependencies it requires
# for running commands. The path should point to the
# base directory of the Automate package we want to use
# TODO: describe how to work with dependencies in code.
dependencies:
  provider:
    name1:
      path: "../name1"
    name2: "../name2"
  recipe:
    build-app: "http://github.com/myorg/pkg/recipe/build-app@1.0.0"
    install-app:
      path: "../recipe/install-app"
  template:
    helpers:
      utils: "../utils/mod.ts"

# A package defines default input values
# used for calling package commands..
# This is also where we can define "ENV" variables
# required for provider/recipe instantiation
values:
  env:
    ENV1: default
  key1: value1
  key2: value2
  recipe:
    install-app:
      values:
        - ./values.yaml
        - ./values/{{ values.env }}.yaml
    build-app:
      values:
        - ./values.yaml
        - ./values/{{ values.env }}.yaml

# `Provider` type packages may define (super helpful
# but not required):
# - command names and input and output types.
# - runtime environment variables
provider:
  types:
    MyType1:
      key1: string
      key2: number
    MyType2:
      key1: string
      key2: number
  commands:
    cmd1:
      async: true
      description: |
        cmd1 is awesome
      in: MyType1
      out: void
    cmd2:
      in: MyType2
      out: void

# `Recipe` package types define steps of execution.
# Tasks can bind template and run provider commands.
# (This is still TBD)
recipe:
  steps:
    setup:
      - name: step1
        description: |
          Look up values for something
        cmd: provider.name1/get
        in:
          arg1: "{{ values.key1 | $.utils.fn1 }}"
        out: state.key1
      - dep: provider.name1
        cmd: list
        in:
          arg1: "{{ values.key2 }}"
        out: state.mylist
      - cmd: provider.values/merge
        input:
          files: "{{ values.build-app.files }}"
        output: state.build-app

    build-app:
      - description: build app now
        cmd: recipe/build-app/call
        in:
          values: "{{ state.build-app.values }}"

    install-app:
      - description: |
          "alternate way to run programs"
        cmd: provider/exec/bash
        in:
          values:
            yaml: "{{ values | toYAML}}"
            json: "{{ values | toJSON}}"

        template: |
          automate recipe {{ step.name }} run \
            --value={{ values.{{ step.name }}.values[0] }}
            --value={{ values.{{ step.name }}.values[1] }}
